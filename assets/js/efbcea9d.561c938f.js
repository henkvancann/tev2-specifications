"use strict";(self.webpackChunktev2_specifications=self.webpackChunktev2_specifications||[]).push([[1895],{3905:(e,t,r)=>{r.d(t,{Zo:()=>f,kt:()=>u});var o=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,o,a=function(e,t){if(null==e)return{};var r,o,a={},n=Object.keys(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=o.createContext({}),p=function(e){var t=o.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},f=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},l=o.forwardRef((function(e,t){var r=e.components,a=e.mdxType,n=e.originalType,c=e.parentName,f=i(e,["components","mdxType","originalType","parentName"]),l=p(r),u=a,h=l["".concat(c,".").concat(u)]||l[u]||d[u]||n;return r?o.createElement(h,s(s({ref:t},f),{},{components:r})):o.createElement(h,s({ref:t},f))}));function u(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=r.length,s=new Array(n);s[0]=l;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var p=2;p<n;p++)s[p]=r[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,r)}l.displayName="MDXCreateElement"},6352:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>n,metadata:()=>i,toc:()=>p});var o=r(3117),a=(r(7294),r(3905));const n={id:"converter",term:"converter",termType:"concept",isa:null,glossaryTerm:"Converter",glossaryText:"a software component that takes the output of an [interpreter](@), i.e., the set of moustache variables it has produced, and processes these, possibly with other data from e.g. a [MRG](@), to generate a new, converted text in a different format. The converter uses the values assigned to the moustache variables to produce the transformed output.",synonymOf:null,grouptags:null,formPhrases:"converter{ss}",status:"proposed",created:new Date("2023-07-31T00:00:00.000Z"),updated:new Date("2023-07-31T00:00:00.000Z"),contributors:"RieksJ",attribution:"[TNO Terminology Design](https://tno-terminology-design.github.io/tev2-specifications/docs)",originalLicense:"[CC BY-SA 4.0](http://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1)"},s="Converter",i={unversionedId:"terms/converter",id:"terms/converter",title:"Converter",description:"A converter is a software component that takes the output of an interpreter, i.e., the set of moustache variables it has produced, and processes these, possibly with other data from e.g. a MRG, to generate a new, converted text in a different format. The converter uses the values assigned to the moustache variables to produce the transformed output.",source:"@site/docs/terms/converter.md",sourceDirName:"terms",slug:"/terms/converter",permalink:"/tev2-specifications/docs/terms/converter",draft:!1,editUrl:"https://github.com/tno-terminology-design/tev2-specifications/blob/master/docs/terms/converter.md",tags:[],version:"current",lastUpdatedBy:"Rieks",lastUpdatedAt:1701079847,formattedLastUpdatedAt:"Nov 27, 2023",frontMatter:{id:"converter",term:"converter",termType:"concept",isa:null,glossaryTerm:"Converter",glossaryText:"a software component that takes the output of an [interpreter](@), i.e., the set of moustache variables it has produced, and processes these, possibly with other data from e.g. a [MRG](@), to generate a new, converted text in a different format. The converter uses the values assigned to the moustache variables to produce the transformed output.",synonymOf:null,grouptags:null,formPhrases:"converter{ss}",status:"proposed",created:"2023-07-31T00:00:00.000Z",updated:"2023-07-31T00:00:00.000Z",contributors:"RieksJ",attribution:"[TNO Terminology Design](https://tno-terminology-design.github.io/tev2-specifications/docs)",originalLicense:"[CC BY-SA 4.0](http://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1)"},sidebar:"tev2SideBar",previous:{title:"Conceptualization",permalink:"/tev2-specifications/docs/terms/conceptualization"},next:{title:"Corpus",permalink:"/tev2-specifications/docs/terms/corpus"}},c={},p=[],f={toc:p};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,o.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"converter"},"Converter"),(0,a.kt)("p",null,"A ",(0,a.kt)("strong",{parentName:"p"},"converter")," is a software component that takes the output of an ",(0,a.kt)("a",{href:"/tev2-specifications/docs/terms/interpreter",hovertext:"Interpreter: a software component that reads a (source) text of a specific format, such as a wiki-page or JSON file, and produces a set of Moustache Variables based on a predefined profile. These Variables represent extracted data or metadata from the source text."},"interpreter"),", i.e., the set of moustache variables it has produced, and processes these, possibly with other data from e.g. a ",(0,a.kt)("a",{href:"/tev2-specifications/docs/terms/mrg",hovertext:"MRG: a Glossary for a particular (version of a) Terminology that is formatted in YAML, according to the [TEv2 MRG specifications](/docs/spec-files/mrg), to enable automated processing and integration with software systems."},"MRG"),", to generate a new, converted text in a different format. The converter uses the values assigned to the moustache variables to produce the transformed output."),(0,a.kt)("p",null,"Converters are used, e.g., by the ",(0,a.kt)("a",{href:"/tev2-specifications/docs/spec-tools/trrt",hovertext:"TermRef Rendering Tool: a TEv2 Tool that is designed to facilitate the visualization and rendering of TermRefs."},"TRRT")," to create ",(0,a.kt)("a",{href:"/tev2-specifications/docs/terms/renderable-ref",hovertext:"Renderable Ref: a text with which the TRRT replaces a TermRef, that can be processed by specific third party rendering tools, the result of which is a rendering of the original TermRef that has additional characteristics that help Readers to (better) understand the intention of its Author."},"renderable refs")," from the ",(0,a.kt)("a",{href:"/tev2-specifications/docs/terms/moustache-variable",hovertext:"Moustache Variable: a placeholder in the form of a 'moustache' tag, e.g. ```, within some text. They are used, e.g., by the TRRT, where they get their values from an Interpreter, and where they are used in a selected Converter for the purpose of replacing TermRefs with Renderable Refs."},"moustache variables")," produced by ",(0,a.kt)("a",{href:"/tev2-specifications/docs/terms/term-ref",hovertext:"TermRef: a word or phrase that is Marked Up (in A Specific Way) so that it refers to a particular Concept (or other Semantic Unit), enabling it to be rendered in a variety of ways for the purpose of helping Readers to (better) understand the intention of its Author."},"TermRefs"),"."))}d.isMDXComponent=!0}}]);
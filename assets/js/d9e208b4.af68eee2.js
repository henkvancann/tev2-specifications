"use strict";(self.webpackChunktev2_specifications=self.webpackChunktev2_specifications||[]).push([[7775],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),l=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),f=l(a),d=n,c=f["".concat(p,".").concat(d)]||f[d]||h[d]||i;return a?r.createElement(c,o(o({ref:t},m),{},{components:a})):r.createElement(c,o({ref:t},m))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=f;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var l=2;l<i;l++)o[l]=a[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}f.displayName="MDXCreateElement"},6169:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=a(3117),n=(a(7294),a(3905));a(4996);const i={id:"form-phrase-syntax",sidebar_label:"Form Phrases",date:20220808},o="Form Phrases - Syntax",s={unversionedId:"spec-syntax/form-phrase-syntax",id:"spec-syntax/form-phrase-syntax",title:"Form Phrases - Syntax",description:"This document specifies the syntax of form phrases, i.e. texts that are specified in the header of curated texts, in the field formPhrases.",source:"@site/docs/spec-syntax/51-form-phrase-syntax.md",sourceDirName:"spec-syntax",slug:"/spec-syntax/form-phrase-syntax",permalink:"/tev2-specifications/docs/spec-syntax/form-phrase-syntax",draft:!1,editUrl:"https://github.com/tno-terminology-design/tev2-specifications/blob/master/docs/spec-syntax/51-form-phrase-syntax.md",tags:[],version:"current",lastUpdatedBy:"Rieks",lastUpdatedAt:1702049334,formattedLastUpdatedAt:"Dec 8, 2023",sidebarPosition:51,frontMatter:{id:"form-phrase-syntax",sidebar_label:"Form Phrases",date:20220808},sidebar:"tev2SideBar",previous:{title:"MRG References",permalink:"/tev2-specifications/docs/spec-syntax/mrg-ref-syntax"},next:{title:"MRG Term Selection",permalink:"/tev2-specifications/docs/spec-syntax/mrg-term-selection-syntax"}},p={},l=[{value:"Simple Form Phrases",id:"simple-form-phrases",level:2},{value:"Form phrase macros",id:"form-phrase-macros",level:2},{value:"Notes",id:"notes",level:2}],m={toc:l};function h(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"form-phrases---syntax"},"Form Phrases - Syntax"),(0,n.kt)("p",null,"This document specifies the syntax of ",(0,n.kt)("a",{parentName:"p",href:"@"},"form phrases"),", i.e. texts that are specified in the ",(0,n.kt)("a",{parentName:"p",href:"@"},"header")," of ",(0,n.kt)("a",{parentName:"p",href:"@"},"curated texts"),", in the field ",(0,n.kt)("inlineCode",{parentName:"p"},"formPhrases"),".",(0,n.kt)("sup",{parentName:"p",id:"fnref-1"},(0,n.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"@"},"Form phrases")," are ",(0,n.kt)("a",{parentName:"p",href:"/docs/spec-tools/trrt#id"},"used to automatically convert")," the ",(0,n.kt)("inlineCode",{parentName:"p"},"show text")," parts of ",(0,n.kt)("a",{parentName:"p",href:"@"},"term refs")," into ",(0,n.kt)("inlineCode",{parentName:"p"},"[termid](@)"),"s, for the purpose of accommodating, e.g., plural forms (for nouns) or conjugate forms (for verbs). This facilitates the work for ",(0,n.kt)("a",{parentName:"p",href:"@"},"authors"),", as this no longer requires them to explicitly mention the ",(0,n.kt)("inlineCode",{parentName:"p"},"term")," part in a ",(0,n.kt)("a",{parentName:"p",href:"@"},"term ref")," when the ",(0,n.kt)("inlineCode",{parentName:"p"},"showtext")," they use matches one of the ",(0,n.kt)("a",{parentName:"p",href:"@"},"form phrases"),"."),(0,n.kt)("h2",{id:"simple-form-phrases"},"Simple Form Phrases"),(0,n.kt)("p",null,"In the simple form, a single ",(0,n.kt)("a",{parentName:"p",href:"@"},"form phrase")," is a sequence of characters ",(0,n.kt)("a",{parentName:"p",href:"https://www.debuggex.com/r/w7mm0fzpON23yuZQ"},(0,n.kt)("inlineCode",{parentName:"a"},"[a-z0-9_-]+")),". The contents of the ",(0,n.kt)("inlineCode",{parentName:"p"},"formPhrases")," field (in the ",(0,n.kt)("a",{parentName:"p",href:"@"},"header")," of a ",(0,n.kt)("a",{parentName:"p",href:"@"},"curated text"),") is a comma-separated list of such ",(0,n.kt)("a",{parentName:"p",href:"@"},"form phrases"),", matching the (PCRE) regex ",(0,n.kt)("a",{parentName:"p",href:"https://www.debuggex.com/r/20MNb2zgNwLDD-dD"},(0,n.kt)("inlineCode",{parentName:"a"},"(?:\\s*(?:[a-z0-9_-{}]+)\\s*(?:,\\s*([a-z0-9_-{}]+))*)?")),"."),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"formPhrases"),"-field is used by the ",(0,n.kt)("a",{parentName:"p",href:"@"},"trrt")," in its attempts to ",(0,n.kt)("a",{parentName:"p",href:"/docs/spec-tools/trrt#showtext"},"convert the ",(0,n.kt)("inlineCode",{parentName:"a"},"showtext"))," part of a ",(0,n.kt)("a",{parentName:"p",href:"@"},"term ref")," into a string that can serve as the ",(0,n.kt)("inlineCode",{parentName:"p"},"term")," of that ",(0,n.kt)("a",{parentName:"p",href:"@"},"term ref"),"."),(0,n.kt)("p",null,"The ",(0,n.kt)("a",{parentName:"p",href:"@"},"trrt")," does so by looping over the ",(0,n.kt)("a",{parentName:"p",href:"@"},"terms")," of the designated ",(0,n.kt)("a",{parentName:"p",href:"@"},"terminology"),", and checking whether or not such a ",(0,n.kt)("a",{parentName:"p",href:"@"},"term")," is a match, as follows:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"First, the ",(0,n.kt)("a",{parentName:"li",href:"@"},"trrt")," simplifies the ",(0,n.kt)("inlineCode",{parentName:"li"},"showtext"),", by converting uppercase characters to lowercase, and replacing (sequences of) special characters and spaces with a single ",(0,n.kt)("inlineCode",{parentName:"li"},"-")," character. Thus a ",(0,n.kt)("inlineCode",{parentName:"li"},"showtext")," with value ",(0,n.kt)("inlineCode",{parentName:"li"},"Form - Phrase")," would be converted into ",(0,n.kt)("inlineCode",{parentName:"li"},"form-phrase"),"."),(0,n.kt)("li",{parentName:"ul"},"Then, the ",(0,n.kt)("a",{parentName:"li",href:"@"},"trrt")," checks whether the result matches the contents of the ",(0,n.kt)("inlineCode",{parentName:"li"},"term"),"-field, and is done when that's the case. "),(0,n.kt)("li",{parentName:"ul"},"If there is no match, the ",(0,n.kt)("a",{parentName:"li",href:"@"},"trrt")," checks whether the result matches any of the ",(0,n.kt)("a",{parentName:"li",href:"@"},"form phrases")," in the ",(0,n.kt)("inlineCode",{parentName:"li"},"formPhrases")," field. If that is the case, there is a match, and the ",(0,n.kt)("a",{parentName:"li",href:"@"},"term ref")," of which the ",(0,n.kt)("inlineCode",{parentName:"li"},"showtext")," is a part will be referring to the matching ",(0,n.kt)("a",{parentName:"li",href:"@"},"term"),".")),(0,n.kt)("p",null,"Thus, if the ",(0,n.kt)("inlineCode",{parentName:"p"},"showtext")," of a ",(0,n.kt)("a",{parentName:"p",href:"@"},"term ref")," is ",(0,n.kt)("inlineCode",{parentName:"p"},"actor's"),", and the ",(0,n.kt)("inlineCode",{parentName:"p"},"formPhrases")," field of some ",(0,n.kt)("a",{parentName:"p",href:"@"},"curated text")," contains ",(0,n.kt)("inlineCode",{parentName:"p"},"actors, actor's, actor(s)"),", there would be a match, and the ",(0,n.kt)("a",{parentName:"p",href:"@"},"term ref")," would refer to that ",(0,n.kt)("a",{parentName:"p",href:"@"},"term"),"). "),(0,n.kt)("p",null,"Similarly, if the ",(0,n.kt)("inlineCode",{parentName:"p"},"showtext")," is ",(0,n.kt)("inlineCode",{parentName:"p"},"Term Refs"),", and some (other) ",(0,n.kt)("a",{parentName:"p",href:"@"},"curated text")," has a ",(0,n.kt)("inlineCode",{parentName:"p"},"term")," field containing ",(0,n.kt)("inlineCode",{parentName:"p"},"termref")," and its ",(0,n.kt)("inlineCode",{parentName:"p"},"formPhrases")," field contains ",(0,n.kt)("inlineCode",{parentName:"p"},"termrefs, term-ref, term-refs"),", then there would be a match. Note that other ",(0,n.kt)("inlineCode",{parentName:"p"},"showtexts"),", such as ",(0,n.kt)("inlineCode",{parentName:"p"},"TermRef"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"termref"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"term-ref"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"term%refs"),", etc., would also result in a match."),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Detailed example"),(0,n.kt)("p",null,"Consider a text with a ",(0,n.kt)("a",{parentName:"p",href:"@"},"term ref"),", e.g., "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-markdown"},"...\nThis is a text that is about [actors](actor@), and the [actor's](actor@) capabilities.\nThis text also says what the [actor(s)](actor@) might be doing.\n...\n")),(0,n.kt)("p",null,"As you can see, the ",(0,n.kt)("inlineCode",{parentName:"p"},"showtexts")," are plurals or conjugate forms of the term ",(0,n.kt)("inlineCode",{parentName:"p"},"actor"),".\nIt would help ",(0,n.kt)("a",{parentName:"p",href:"@"},"authors")," if they could write this text as follows:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-markdown"},"...\nThis is a text that is about [actors](@), and the [actor's](@) capabilities.\nThis text also says what the [actor(s)](@) might be doing.\n...\n")),(0,n.kt)("p",null,"which would require the ",(0,n.kt)("a",{parentName:"p",href:"@"},"trrt")," to automatically convert such plurals or conjugate forms into the corresponding base term. That's where ",(0,n.kt)("a",{parentName:"p",href:"@"},"form phrases")," come in."),(0,n.kt)("p",null,"This can be done by specifying such plurals, conjugate forms, or any other texts as a ",(0,n.kt)("a",{parentName:"p",href:"@"},"form phrase")," and adding it to the ",(0,n.kt)("inlineCode",{parentName:"p"},"formPhrases")," field (in the ",(0,n.kt)("a",{parentName:"p",href:"@"},"header"),") of the ",(0,n.kt)("a",{parentName:"p",href:"@"},"curated text")," that documents the base term (",(0,n.kt)("inlineCode",{parentName:"p"},"actor")," in our example), as follows:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"formPhrases: actors, actor's, actor(s)\n"))),(0,n.kt)("h2",{id:"form-phrase-macros"},"Form phrase macros"),(0,n.kt)("p",null,"When you have worked some time with ",(0,n.kt)("a",{parentName:"p",href:"@"},"form phrases"),", you will have noticed some patterns. For example, there many nouns (such as ",(0,n.kt)("inlineCode",{parentName:"p"},"actor"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"term"),", or ",(0,n.kt)("inlineCode",{parentName:"p"},"form phrase"),") have a plural form that can be constructing by adding an ",(0,n.kt)("inlineCode",{parentName:"p"},"s"),", and it is conventient to specify such a plural form as a ",(0,n.kt)("a",{parentName:"p",href:"@"},"form phrase"),". These nouns also have other often recurring forms, that are constructed by adding, e.g., ",(0,n.kt)("inlineCode",{parentName:"p"},"'s"),", or ",(0,n.kt)("inlineCode",{parentName:"p"},"(s)"),"."),(0,n.kt)("p",null,"A ",(0,n.kt)("a",{parentName:"p",href:"@"},"form phrase")," macro is a syntax that allows you to specify such a pattern as a single ",(0,n.kt)("a",{parentName:"p",href:"@"},"form phrase"),". For example, the constructions mentioned in the previous paragraph can be specified by adding ",(0,n.kt)("inlineCode",{parentName:"p"},"{ss}")," to the noun, as in ",(0,n.kt)("inlineCode",{parentName:"p"},"actor{ss}"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"term{ss}"),", and ",(0,n.kt)("inlineCode",{parentName:"p"},"form-phrase{ss}"),". The text ",(0,n.kt)("inlineCode",{parentName:"p"},"{ss}")," is a form phrase macro; it is a shorthand syntax that, when used in a ",(0,n.kt)("a",{parentName:"p",href:"@"},"form phrase"),", specifies a list of ",(0,n.kt)("a",{parentName:"p",href:"@"},"form phrases")," that are derived from its non-macro part."),(0,n.kt)("p",null,"The following table specifies the ",(0,n.kt)("a",{parentName:"p",href:"@"},"form phrase")," macros that have currently being defined. The table shows "),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"the macro text,"),(0,n.kt)("li",{parentName:"ol"},"the regex that is used for checking whether a (simplified) ",(0,n.kt)("inlineCode",{parentName:"li"},"showtext")," matches the ",(0,n.kt)("a",{parentName:"li",href:"@"},"form phrase"),","),(0,n.kt)("li",{parentName:"ol"},"an example that could appear as a ",(0,n.kt)("a",{parentName:"li",href:"@"},"form phrase")," in a ",(0,n.kt)("inlineCode",{parentName:"li"},"formPhrases"),"-field of a ",(0,n.kt)("a",{parentName:"li",href:"@"},"curated text"),","),(0,n.kt)("li",{parentName:"ol"},"the set of (simplified) ",(0,n.kt)("inlineCode",{parentName:"li"},"showtext"),"s that would match that ",(0,n.kt)("a",{parentName:"li",href:"@"},"form phrase"),":")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"macro"),(0,n.kt)("th",{parentName:"tr",align:"center"},"regex"),(0,n.kt)("th",{parentName:"tr",align:"center"},"example"),(0,n.kt)("th",{parentName:"tr",align:"left"},"texts that the example matches"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"{ss}")),(0,n.kt)("td",{parentName:"tr",align:"center"},(0,n.kt)("code",null,"(","|","s","|","'s","|","(s",")",")")),(0,n.kt)("td",{parentName:"tr",align:"center"},(0,n.kt)("inlineCode",{parentName:"td"},"actor{ss}")),(0,n.kt)("td",{parentName:"tr",align:"left"},'matches: "actor", "actors", "actor\'s", and "actor(s)"')),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"{yies}")),(0,n.kt)("td",{parentName:"tr",align:"center"},(0,n.kt)("code",null,"(y","|","y's","|","ies)")),(0,n.kt)("td",{parentName:"tr",align:"center"},(0,n.kt)("inlineCode",{parentName:"td"},"part{yies}")),(0,n.kt)("td",{parentName:"tr",align:"left"},'matches: "party", "party\'s", and "parties"')),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"{ying}")),(0,n.kt)("td",{parentName:"tr",align:"center"},(0,n.kt)("code",null,"(y","|","ier","|","ying","|","ies","|","ied)")),(0,n.kt)("td",{parentName:"tr",align:"center"},(0,n.kt)("inlineCode",{parentName:"td"},"identif{ying}")),(0,n.kt)("td",{parentName:"tr",align:"left"},'matches: "identify", "identifier", "identifying", "identifies", and "identified"')))),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Example of a form phrase macro and its use"),(0,n.kt)("p",null,"Suppose we have a ",(0,n.kt)("a",{parentName:"p",href:"@"},"curated text")," for the term ",(0,n.kt)("inlineCode",{parentName:"p"},"actor"),", and in its front matter, we specify:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"formPhrases: identif{yies}\n")),(0,n.kt)("p",null,"The part ",(0,n.kt)("inlineCode",{parentName:"p"},"{yies}")," is a (predefined) macro, that is associated with the regex ",(0,n.kt)("inlineCode",{parentName:"p"},"(y|y's|ies)"),"."),(0,n.kt)("p",null,"When the ",(0,n.kt)("a",{parentName:"p",href:"@"},"trrt")," converts a ",(0,n.kt)("a",{parentName:"p",href:"@"},"term ref"),", one of the things it needs to do is to ",(0,n.kt)("a",{parentName:"p",href:"/docs/spec-tools/trrt#showtext"},"convert a so-called ",(0,n.kt)("inlineCode",{parentName:"a"},"show-text")," into a ",(0,n.kt)("inlineCode",{parentName:"a"},"term"))," that exists in some ",(0,n.kt)("a",{parentName:"p",href:"@"},"curated text"),". If the ",(0,n.kt)("inlineCode",{parentName:"p"},"show-text")," does not match the ",(0,n.kt)("inlineCode",{parentName:"p"},"term")," of any of the ",(0,n.kt)("a",{parentName:"p",href:"@"},"curated texts"),", the ",(0,n.kt)("a",{parentName:"p",href:"@"},"trrt")," will try to match it against every form phrase in every ",(0,n.kt)("a",{parentName:"p",href:"@"},"curated text"),", including the ",(0,n.kt)("a",{parentName:"p",href:"@"},"formphrase")," ",(0,n.kt)("inlineCode",{parentName:"p"},"actor{ss}"),"."),(0,n.kt)("p",null,"You can think of how this work as follows",(0,n.kt)("sup",{parentName:"p",id:"fnref-3"},(0,n.kt)("a",{parentName:"sup",href:"#fn-3",className:"footnote-ref"},"3")),". When the ",(0,n.kt)("a",{parentName:"p",href:"@"},"trrt")," encounters a ",(0,n.kt)("inlineCode",{parentName:"p"},"showtext"),", it will loop over ",(0,n.kt)("a",{parentName:"p",href:"@"},"curated texts")," (or ",(0,n.kt)("a",{parentName:"p",href:"@"},"MRG entries"),") to find a match. If it can't find one (in case ",(0,n.kt)("inlineCode",{parentName:"p"},"showtext")," is not the value of the ",(0,n.kt)("inlineCode",{parentName:"p"},"term")," field), it will the take the list of ",(0,n.kt)("a",{parentName:"p",href:"@"},"form phrases")," specified in the ",(0,n.kt)("inlineCode",{parentName:"p"},"formPhrases")," field, and replace every of its ",(0,n.kt)("a",{parentName:"p",href:"@"},"form phrase")," that contains a macro, with all possible ","[form phrases]"," that do not contain a macro. For example, if the contents of the ",(0,n.kt)("inlineCode",{parentName:"p"},"formPhrases")," field would be ",(0,n.kt)("inlineCode",{parentName:"p"},"identifier{ss}, identif(ying)"),", the replacement result would be the list ",(0,n.kt)("inlineCode",{parentName:"p"},"identifier"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"identifiers"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"identifier's"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"identifier(s)"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"identify"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"identifier"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"identifying"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"identifies")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"identified"),". So there would be a match if the ",(0,n.kt)("inlineCode",{parentName:"p"},"showtext")," would equal any of these ",(0,n.kt)("a",{parentName:"p",href:"@"},"term refs"),".")),(0,n.kt)("h2",{id:"notes"},"Notes"),(0,n.kt)("div",{className:"footnotes"},(0,n.kt)("hr",{parentName:"div"}),(0,n.kt)("ol",{parentName:"div"},(0,n.kt)("li",{parentName:"ol",id:"fn-1"},"Since ",(0,n.kt)("a",{parentName:"li",href:"@"},"MRG entries")," include the ",(0,n.kt)("a",{parentName:"li",href:"@"},"header")," of such ",(0,n.kt)("a",{parentName:"li",href:"@"},"curated texts"),", the ",(0,n.kt)("inlineCode",{parentName:"li"},"formPhrases")," field can also be found therein.",(0,n.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-3"},"Actual implementations are expected to do this in a more efficient way.",(0,n.kt)("a",{parentName:"li",href:"#fnref-3",className:"footnote-backref"},"\u21a9")))))}h.isMDXComponent=!0}}]);
"use strict";(self.webpackChunktev2_specifications=self.webpackChunktev2_specifications||[]).push([[7711],{3905:(e,t,r)=>{r.d(t,{Zo:()=>f,kt:()=>u});var a=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,o=function(e,t){if(null==e)return{};var r,a,o={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=a.createContext({}),p=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},f=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,o=e.mdxType,n=e.originalType,c=e.parentName,f=i(e,["components","mdxType","originalType","parentName"]),d=p(r),u=o,m=d["".concat(c,".").concat(u)]||d[u]||l[u]||n;return r?a.createElement(m,s(s({ref:t},f),{},{components:r})):a.createElement(m,s({ref:t},f))}));function u(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=r.length,s=new Array(n);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var p=2;p<n;p++)s[p]=r[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6521:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>n,metadata:()=>i,toc:()=>p});var a=r(3117),o=(r(7294),r(3905));const n={id:"interpreter",term:"interpreter",termType:"concept",isa:null,glossaryTerm:"Interpreter",glossaryText:"a software component that reads a (source) text of a specific format, such as a wiki-page or JSON file, and produces a set of [moustache variables](@) based on a predefined profile. These [variables](moustache-variables@) represent extracted data or metadata from the source text.",synonymOf:null,grouptags:null,formPhrases:"interpreter{ss}",status:"proposed",created:new Date("2023-07-31T00:00:00.000Z"),updated:new Date("2023-07-31T00:00:00.000Z"),contributors:"RieksJ",attribution:"[TNO Terminology Design](https://tno-terminology-design.github.io/tev2-specifications/docs)",originalLicense:"[CC BY-SA 4.0](http://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1)"},s="Interpreter",i={unversionedId:"terms/interpreter",id:"terms/interpreter",title:"Interpreter",description:"An interpreter is a software component that reads a (source) text of a specific format, such as a wiki-page or JSON file, and produces a set of moustache variables based on a predefined profile. These variables represent extracted data or metadata from the source text.",source:"@site/docs/terms/interpreter.md",sourceDirName:"terms",slug:"/terms/interpreter",permalink:"/tev2-specifications/docs/terms/interpreter",draft:!1,editUrl:"https://github.com/tno-terminology-design/tev2-specifications/blob/master/docs/terms/interpreter.md",tags:[],version:"current",lastUpdatedBy:"Rieks",lastUpdatedAt:1701095441,formattedLastUpdatedAt:"Nov 27, 2023",frontMatter:{id:"interpreter",term:"interpreter",termType:"concept",isa:null,glossaryTerm:"Interpreter",glossaryText:"a software component that reads a (source) text of a specific format, such as a wiki-page or JSON file, and produces a set of [moustache variables](@) based on a predefined profile. These [variables](moustache-variables@) represent extracted data or metadata from the source text.",synonymOf:null,grouptags:null,formPhrases:"interpreter{ss}",status:"proposed",created:"2023-07-31T00:00:00.000Z",updated:"2023-07-31T00:00:00.000Z",contributors:"RieksJ",attribution:"[TNO Terminology Design](https://tno-terminology-design.github.io/tev2-specifications/docs)",originalLicense:"[CC BY-SA 4.0](http://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1)"},sidebar:"tev2SideBar",previous:{title:"Ingestion Profile",permalink:"/tev2-specifications/docs/terms/ingestion-profile"},next:{title:"Knowledge Artifact",permalink:"/tev2-specifications/docs/terms/knowledge-artifact"}},c={},p=[],f={toc:p};function l(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"interpreter"},"Interpreter"),(0,o.kt)("p",null,"An ",(0,o.kt)("strong",{parentName:"p"},"interpreter")," is a software component that reads a (source) text of a specific format, such as a wiki-page or JSON file, and produces a set of ",(0,o.kt)("a",{href:"/tev2-specifications/docs/terms/moustache-variable",hovertext:"Moustache Variable: a placeholder in the form of a 'moustache' tag, e.g. ```, within some text. They are used, e.g., by the TRRT, where they get their values from an Interpreter, and where they are used in a selected Converter for the purpose of replacing TermRefs with Renderable Refs."},"moustache variables")," based on a predefined profile. These ",(0,o.kt)("a",{href:"/tev2-specifications/docs/terms/moustache-variable",hovertext:"Moustache Variable: a placeholder in the form of a 'moustache' tag, e.g. ```, within some text. They are used, e.g., by the TRRT, where they get their values from an Interpreter, and where they are used in a selected Converter for the purpose of replacing TermRefs with Renderable Refs."},"variables")," represent extracted data or metadata from the source text."),(0,o.kt)("p",null,"Interpreters are used, e.g., by the ",(0,o.kt)("a",{href:"/tev2-specifications/docs/spec-tools/trrt",hovertext:"TermRef Rendering Tool: a TEv2 Tool that is designed to facilitate the visualization and rendering of TermRefs."},"TRRT")," to find ",(0,o.kt)("a",{href:"/tev2-specifications/docs/terms/term-ref",hovertext:"TermRef: a word or phrase that is Marked Up (in A Specific Way) so that it refers to a particular Concept (or other Semantic Unit), enabling it to be rendered in a variety of ways for the purpose of helping Readers to (better) understand the intention of its Author."},"TermRefs")," in raw texts, and create a set of ",(0,o.kt)("a",{href:"/tev2-specifications/docs/terms/moustache-variable",hovertext:"Moustache Variable: a placeholder in the form of a 'moustache' tag, e.g. ```, within some text. They are used, e.g., by the TRRT, where they get their values from an Interpreter, and where they are used in a selected Converter for the purpose of replacing TermRefs with Renderable Refs."},"moustache variables")," from their ",(0,o.kt)("a",{parentName:"p",href:"/docs/spec-syntax/term-ref-syntax"},"specified syntax")," (or the ",(0,o.kt)("a",{parentName:"p",href:"/docs/spec-syntax/term-ref-syntax#alternative-syntax"},"alternative syntax"),")"))}l.isMDXComponent=!0}}]);
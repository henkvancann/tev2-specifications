"use strict";(self.webpackChunktev2_specifications=self.webpackChunktev2_specifications||[]).push([[8900],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>f});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),h=p(a),f=r,c=h["".concat(s,".").concat(f)]||h[f]||d[f]||i;return a?n.createElement(c,l(l({ref:t},m),{},{components:a})):n.createElement(c,l({ref:t},m))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=h;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(7294),r=a(6010);const i="tabItem_Ymn6";function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,l),hidden:a},t)}},4866:(e,t,a)=>{a.d(t,{Z:()=>C});var n=a(3117),r=a(7294),i=a(6010),l=a(2466),o=a(6775),s=a(1980),p=a(7392),m=a(12);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function h(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??d(a);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function f(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function c(e){let{queryString:t=!1,groupId:a}=e;const n=(0,o.k6)(),i=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,s._X)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(n.location.search);t.set(i,e),n.replace({...n.location,search:t.toString()})}),[i,n])]}function k(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,i=h(e),[l,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!f({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:i}))),[s,p]=c({queryString:a,groupId:n}),[d,k]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,i]=(0,m.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&i.set(e)}),[a,i])]}({groupId:n}),u=(()=>{const e=s??d;return f({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{u&&o(u)}),[u]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!f({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),p(e),k(e)}),[p,k,i]),tabValues:i}}var u=a(2389);const N="tabList__CuJ",g="tabItem_LNqP";function y(e){let{className:t,block:a,selectedValue:o,selectValue:s,tabValues:p}=e;const m=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),h=e=>{const t=e.currentTarget,a=m.indexOf(t),n=p[a].value;n!==o&&(d(t),s(n))},f=e=>{let t=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const a=m.indexOf(e.currentTarget)+1;t=m[a]??m[0];break}case"ArrowLeft":{const a=m.indexOf(e.currentTarget)-1;t=m[a]??m[m.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":a},t)},p.map((e=>{let{value:t,label:a,attributes:l}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>m.push(e),onKeyDown:f,onClick:h},l,{className:(0,i.Z)("tabs__item",g,l?.className,{"tabs__item--active":o===t})}),a??t)})))}function v(e){let{lazy:t,children:a,selectedValue:n}=e;const i=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function b(e){const t=k(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",N)},r.createElement(y,(0,n.Z)({},e,t)),r.createElement(v,(0,n.Z)({},e,t)))}function C(e){const t=(0,u.Z)();return r.createElement(b,(0,n.Z)({key:String(t)},e))}},5470:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=a(3117),r=(a(7294),a(3905));a(4996),a(4866),a(5162);const i={id:"mrg-term-selection-syntax",sidebar_label:"MRG Term Selection",toc_min_heading_level:2,toc_max_heading_level:2,date:20231006},l="MRG Term Selection Instruction Syntax",o={unversionedId:"spec-syntax/mrg-term-selection-syntax",id:"spec-syntax/mrg-term-selection-syntax",title:"MRG Term Selection Instruction Syntax",description:"Curators must have the ability to determine which terms are, or are not part of a terminology, as a prerequisite for generating a corresponding MRG. This document specifies the syntax for the instructions that curators can use to do this, and also how these instructions are being processed, which leads to a provisional MRG that contains provisional MRG entries for each of these terms. This processing is the first step in MRG generation",source:"@site/docs/spec-syntax/61-mrg-term-selection-syntax.md",sourceDirName:"spec-syntax",slug:"/spec-syntax/mrg-term-selection-syntax",permalink:"/tev2-specifications/docs/spec-syntax/mrg-term-selection-syntax",draft:!1,editUrl:"https://github.com/tno-terminology-design/tev2-specifications/blob/master/docs/spec-syntax/61-mrg-term-selection-syntax.md",tags:[],version:"current",lastUpdatedBy:"Rieks",lastUpdatedAt:1702049334,formattedLastUpdatedAt:"Dec 8, 2023",sidebarPosition:61,frontMatter:{id:"mrg-term-selection-syntax",sidebar_label:"MRG Term Selection",toc_min_heading_level:2,toc_max_heading_level:2,date:20231006},sidebar:"tev2SideBar",previous:{title:"Form Phrases",permalink:"/tev2-specifications/docs/spec-syntax/form-phrase-syntax"},next:{title:"overview",permalink:"/tev2-specifications/docs/spec-tools/overview-spec-tools"}},s={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Adding Terms",id:"syntax-add",level:2},{value:"Selecting all terms from a particular source",id:"syntax-add-all-terms",level:3},{value:"Selecting specific terms from a particular source",id:"syntax-add-selected-terms",level:3},{value:"Removing Terms",id:"syntax-remove",level:2},{value:"Renaming/rewriting term fields",id:"syntax-rename",level:2}],m={toc:p};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mrg-term-selection-instruction-syntax"},"MRG Term Selection Instruction Syntax"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"@"},"Curators")," must have the ability to determine which ",(0,r.kt)("a",{parentName:"p",href:"@"},"terms")," are, or are not part of a ",(0,r.kt)("a",{parentName:"p",href:"@"},"terminology"),", as a prerequisite for generating a corresponding ",(0,r.kt)("a",{parentName:"p",href:"@"},"MRG"),". This document specifies the syntax for the instructions that ",(0,r.kt)("a",{parentName:"p",href:"@"},"curators")," can use to do this, and also how these instructions are being processed, which leads to a ",(0,r.kt)("a",{parentName:"p",href:"@"},"provisional MRG")," that contains ",(0,r.kt)("a",{parentName:"p",href:"@"},"provisional MRG entries")," for each of these ",(0,r.kt)("a",{parentName:"p",href:"@"},"terms"),". This processing is ",(0,r.kt)("a",{parentName:"p",href:"/docs/spec-tools/mrgt#mrgt-constructing-provisional-mrg"},"the first step in MRG generation")),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Specifying a ",(0,r.kt)("a",{parentName:"p",href:"@"},"terminology"),", i.e., creating a ",(0,r.kt)("a",{parentName:"p",href:"@"},"provisional MRG")," is a process that starts with an empty set of ",(0,r.kt)("a",{parentName:"p",href:"@"},"terms"),", i.e., an empty set of ",(0,r.kt)("a",{parentName:"p",href:"@"},"provisional MRG entries")," that each document such a ",(0,r.kt)("a",{parentName:"p",href:"@"},"term"),". Then, the ",(0,r.kt)("a",{parentName:"p",href:"@"},"terminology selection instructions")," that are specified for the particular version of the ",(0,r.kt)("a",{parentName:"p",href:"@"},"terminology")," (as specified in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/spec-files/saf#versions"},(0,r.kt)("inlineCode",{parentName:"a"},"versions")," section")," of the ",(0,r.kt)("a",{parentName:"p",href:"@"},"SAF"),"), are executed; one after the other."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example SAF, showing elements that are relevant for term selection (irrelevant fields are omitted)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'scope:\n  scopetag: myscope # identifier for \'current scope\'\n  scopedir: https://github.com/myscope-repo/tree/master/docs  # URL of the scope-directory of `myscope`\n  curatedir: terms # directory where all curated files are located.\n  glossarydir: glossaries # directory where all glossary files and related stuff are located.\n  defaultvsn: latest # vsntag that identifies the default terminology. A link to the MRG is located at `scopedir`/`glossarydir`/mrg.`scopetag`.yaml\n...\nscopes:\n\n- scopetag: essiflab # definition of (scope) tag(s) that are used within this scope to refer to a specific terminology\n  scopedir: https://github.com/essif-lab/framework/tree/master/docs # URL of the scope-directory\n- scopetag: tev2 # definition of (scope)tag(s) that are used within this scope to refer to a specific terminology\n  scopedir: https://github.com/tno-terminology-design/tev2-specifications/tree/master/docs # URL of the scope-directory\n...\nversions:\n  - vsntag: terms\n    termselection:\n      - "*" # import all terms defined by a curated text in the [current scope](@)\n  - vsntag: v1.0.3 # a versiontag that identifies this version from all other versions in the SAF\n    altvsntags: [ latest ] \n    termselection:\n      - "*@essiflab" # import all terms from the MRG linked to by `mrg.essiflab.yaml`\n      - "-grouptags[terminology]" # then, remove all terms tagged with the grouptag `terminology`\n      - "*" # then, all terms defined by a curated text in the [current scope](@)\n'))),(0,r.kt)("p",null,"In this text, we will use the ",(0,r.kt)("a",{parentName:"p",href:"@"},"term")," ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"@"},"current scope"))," for the ",(0,r.kt)("a",{parentName:"p",href:"@"},"scope")," within which the ",(0,r.kt)("a",{parentName:"p",href:"@"},"terminology")," is being created. Note that in the ",(0,r.kt)("a",{parentName:"p",href:"@"},"current scope"),", you can only create a ",(0,r.kt)("a",{parentName:"p",href:"@"},"terminology")," that belongs to that ",(0,r.kt)("a",{parentName:"p",href:"@"},"scope"),", and therefore that ",(0,r.kt)("a",{parentName:"p",href:"@"},"terminology")," must be one of the versions as defined in the ",(0,r.kt)("a",{parentName:"p",href:"@"},"SAF")," of that scope. The particular version that is being created is then referred to as the ",(0,r.kt)("strong",{parentName:"p"},"current version"),"."),(0,r.kt)("h2",{id:"syntax-add"},"Adding Terms"),(0,r.kt)("p",null,"Selecting and subsequently adding ",(0,r.kt)("a",{parentName:"p",href:"@"},"terms")," to the ",(0,r.kt)("a",{parentName:"p",href:"@"},"provisional MRG")," consists of:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"@"},"identifying")," such ",(0,r.kt)("a",{parentName:"li",href:"@"},"terms"),";"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"@"},"identifying")," the source from which data is to be taken for constructing the associated ",(0,r.kt)("a",{parentName:"li",href:"@"},"MRG entries"),";"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"/docs/spec-tools/mrgt#mrgt-create-mrg-entry"},"creating")," a ",(0,r.kt)("a",{parentName:"li",href:"@"},"provisional MRG entry")," for every ",(0,r.kt)("a",{parentName:"li",href:"@"},"semantic unit")," that is ",(0,r.kt)("a",{parentName:"li",href:"@"},"identified"),", using the data that documents this ",(0,r.kt)("a",{parentName:"li",href:"@"},"semantic unit")," in the designated source, and flagging this ",(0,r.kt)("a",{parentName:"li",href:"@"},"provisional MRG entry")," for further processing if (and only if) the source is the set of ",(0,r.kt)("a",{parentName:"li",href:"@"},"curated texts")," of the ",(0,r.kt)("a",{parentName:"li",href:"@"},"current scope"),", and the data contains a ",(0,r.kt)("inlineCode",{parentName:"li"},"synonymOf"),"-field that is not empty;"),(0,r.kt)("li",{parentName:"ol"},"adding this ",(0,r.kt)("a",{parentName:"li",href:"@"},"provisional MRG entry")," to the ",(0,r.kt)("a",{parentName:"li",href:"@"},"provisional MRG"),", possibly overwriting an ",(0,r.kt)("a",{parentName:"li",href:"provisional-mrg-entry@"},"entry")," if one already exists for the ",(0,r.kt)("a",{parentName:"li",href:"@"},"identified")," ",(0,r.kt)("a",{parentName:"li",href:"@"},"term"),".")),(0,r.kt)("p",null,"By default, this source is the set of ",(0,r.kt)("a",{parentName:"p",href:"@"},"curated texts")," of the ",(0,r.kt)("a",{parentName:"p",href:"@"},"current scope"),". For every ",(0,r.kt)("a",{parentName:"p",href:"@"},"curated text")," that documents a selected ",(0,r.kt)("a",{parentName:"p",href:"@"},"term"),", a ",(0,r.kt)("a",{parentName:"p",href:"@"},"provisional MRG entry")," is created that contains the ",(0,r.kt)("a",{parentName:"p",href:"@"},"header")," of that ",(0,r.kt)("a",{parentName:"p",href:"@"},"curated text"),", without the (first and last) lines that contain ",(0,r.kt)("inlineCode",{parentName:"p"},"---")," (the front matter delimiters)."),(0,r.kt)("p",null,"However, any (existing) ",(0,r.kt)("a",{parentName:"p",href:"@"},"MRG")," can be designated as an alternative source, by adding an ",(0,r.kt)("inlineCode",{parentName:"p"},"@<tid>")," part to the instruction, where ",(0,r.kt)("inlineCode",{parentName:"p"},"<tid>")," is a ",(0,r.kt)("a",{parentName:"p",href:"@"},"terminology identifier")," that ",(0,r.kt)("a",{parentName:"p",href:"@"},"identifies")," the ",(0,r.kt)("a",{parentName:"p",href:"@"},"terminology")," from which the ",(0,r.kt)("a",{parentName:"p",href:"@"},"term")," is to be added. For every ",(0,r.kt)("a",{parentName:"p",href:"@"},"MRG entry")," in that ",(0,r.kt)("a",{parentName:"p",href:"@"},"MRG"),", that documents a selected ",(0,r.kt)("a",{parentName:"p",href:"@"},"term"),", a ",(0,r.kt)("a",{parentName:"p",href:"@"},"provisional MRG etry")," is created that contains all fields of that ",(0,r.kt)("a",{parentName:"p",href:"@"},"MRG entry"),", except for the ",(0,r.kt)("inlineCode",{parentName:"p"},"vsntag")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/spec-files/mrg#mrg-entries"},"field"),", which will be assigned the value of the ",(0,r.kt)("inlineCode",{parentName:"p"},"vsntag")," field that is found in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/spec-files/mrg#mrg-terminology"},"'terminology' section")," of the ",(0,r.kt)("a",{parentName:"p",href:"@"},"MRG")," from which the data was taken."),(0,r.kt)("h3",{id:"syntax-add-all-terms"},"Selecting all terms from a particular source"),(0,r.kt)("p",null,"The following syntaxes are available for selecting all ",(0,r.kt)("a",{parentName:"p",href:"@"},"terms")," from a specific source for inclusion into the ",(0,r.kt)("a",{parentName:"p",href:"@"},"provisional MRG"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"*")),(0,r.kt)("br",null),"Add all ",(0,r.kt)("a",{parentName:"li",href:"@"},"terms")," for which there are ",(0,r.kt)("a",{parentName:"li",href:"@"},"curated texts")," in the ",(0,r.kt)("a",{parentName:"li",href:"@"},"current scope"),".",(0,r.kt)("br",null),"\xa0"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"* @<tid>")),(0,r.kt)("br",null),"Add all ",(0,r.kt)("a",{parentName:"li",href:"@"},"terms")," from the ",(0,r.kt)("a",{parentName:"li",href:"@"},"terminology")," that is ",(0,r.kt)("a",{parentName:"li",href:"@"},"identified")," by the ",(0,r.kt)("a",{parentName:"li",href:"@"},"terminology-identifier")," ",(0,r.kt)("inlineCode",{parentName:"li"},"<tid>"),". The associated ",(0,r.kt)("a",{parentName:"li",href:"@"},"MRG")," must exist in the ",(0,r.kt)("a",{parentName:"li",href:"@"},"glossarydir")," of the ",(0,r.kt)("a",{parentName:"li",href:"@"},"current scope"),", which can be arranged by calling the ",(0,r.kt)("a",{parentName:"li",href:"@"},"MRG importer"),".")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Examples:"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Meaning:"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"*","\xa0","@tev2:v1"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Add all ",(0,r.kt)("a",{parentName:"td",href:"@"},"terms")," that are in version ",(0,r.kt)("inlineCode",{parentName:"td"},"v1")," of the ",(0,r.kt)("a",{parentName:"td",href:"@"},"terminology")," of the ",(0,r.kt)("a",{parentName:"td",href:"@"},"scope")," identified by ",(0,r.kt)("inlineCode",{parentName:"td"},"tev2"),", i.e., in ",(0,r.kt)("a",{parentName:"td",href:"@"},"MRG")," file ",(0,r.kt)("inlineCode",{parentName:"td"},"mrg.tev2.v1.yaml"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"* @tev2"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Add all ",(0,r.kt)("a",{parentName:"td",href:"@"},"terms")," that are in the default version of the ",(0,r.kt)("a",{parentName:"td",href:"@"},"terminology")," of the ",(0,r.kt)("a",{parentName:"td",href:"@"},"scope")," identified by ",(0,r.kt)("inlineCode",{parentName:"td"},"tev2"),",",(0,r.kt)("br",null),"i.e., in ",(0,r.kt)("a",{parentName:"td",href:"@"},"MRG")," file ",(0,r.kt)("inlineCode",{parentName:"td"},"mrg.tev2.yaml"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"* @:v1.0.3"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Add all ",(0,r.kt)("a",{parentName:"td",href:"@"},"terms")," that are in version ",(0,r.kt)("inlineCode",{parentName:"td"},"v1.0.3")," of the ",(0,r.kt)("a",{parentName:"td",href:"@"},"terminology")," of the ",(0,r.kt)("a",{parentName:"td",href:"@"},"current scope"),".",(0,r.kt)("br",null),"i.e., in ",(0,r.kt)("a",{parentName:"td",href:"@"},"MRG")," file ",(0,r.kt)("inlineCode",{parentName:"td"},"mrg.<cstag>.v1.0.3.yaml"),", where ",(0,r.kt)("inlineCode",{parentName:"td"},"<cstag>")," is the value of the ",(0,r.kt)("inlineCode",{parentName:"td"},"scopetag")," field in the ",(0,r.kt)("a",{parentName:"td",href:"/docs/spec-files/saf#scope-section"},(0,r.kt)("inlineCode",{parentName:"a"},"scope")," section")," of the ",(0,r.kt)("a",{parentName:"td",href:"@"},"SAF")," of the ",(0,r.kt)("a",{parentName:"td",href:"@"},"current scope"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"* @"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Add all ",(0,r.kt)("a",{parentName:"td",href:"@"},"terms")," that are in the default version of the ",(0,r.kt)("a",{parentName:"td",href:"@"},"terminology")," of the ",(0,r.kt)("a",{parentName:"td",href:"@"},"current scope"),".",(0,r.kt)("br",null),"i.e., in ",(0,r.kt)("a",{parentName:"td",href:"@"},"MRG")," file ",(0,r.kt)("inlineCode",{parentName:"td"},"mrg.<cstag>.yaml"),", where ",(0,r.kt)("inlineCode",{parentName:"td"},"<cstag>")," is the value of the ",(0,r.kt)("inlineCode",{parentName:"td"},"scopetag")," field in the ",(0,r.kt)("a",{parentName:"td",href:"/docs/spec-files/saf#scope-section"},(0,r.kt)("inlineCode",{parentName:"a"},"scope")," section")," of the ",(0,r.kt)("a",{parentName:"td",href:"@"},"SAF")," of the ",(0,r.kt)("a",{parentName:"td",href:"@"},"current scope"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"*"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Add all ",(0,r.kt)("a",{parentName:"td",href:"@"},"terms")," that are described by a ",(0,r.kt)("a",{parentName:"td",href:"@"},"curated text")," in the ",(0,r.kt)("a",{parentName:"td",href:"@"},"current scope"),".")))),(0,r.kt)("p",null,"The difference between ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"* @")," is that the first takes ",(0,r.kt)("a",{parentName:"p",href:"@"},"curated texts")," as source, whereas the latter takes an existing ",(0,r.kt)("a",{parentName:"p",href:"@"},"MRG")," as source, being the ",(0,r.kt)("a",{parentName:"p",href:"@"},"MRG")," that contains the default version of the ",(0,r.kt)("a",{parentName:"p",href:"@"},"terminology")," of the ",(0,r.kt)("a",{parentName:"p",href:"@"},"current scope"),". This allows ",(0,r.kt)("a",{parentName:"p",href:"@"},"terminologies")," to be defined in terms of their predecessors.")),(0,r.kt)("h3",{id:"syntax-add-selected-terms"},"Selecting specific terms from a particular source"),(0,r.kt)("p",null,"The following syntaxes are available for selecting a subset of the ",(0,r.kt)("a",{parentName:"p",href:"@"},"terms")," from a specific source:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"<key>")," ","[ ",(0,r.kt)("inlineCode",{parentName:"strong"},"<value>"),", ",(0,r.kt)("inlineCode",{parentName:"strong"},"<value2>"),", ... ]"),", where:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<key>")," is a text that corresponds with a field name in a ",(0,r.kt)("a",{parentName:"li",href:"@"},"header")," (front-matter) of a ",(0,r.kt)("a",{parentName:"li",href:"@"},"curated text"),", such as ",(0,r.kt)("inlineCode",{parentName:"li"},"term"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"grouptags"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"status"),", etc."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<value>"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"<value2>"),", ... are texts that are used to determine whether or not a ",(0,r.kt)("a",{parentName:"li",href:"@"},"curated text")," is to be selected.",(0,r.kt)("br",null),"\xa0"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"<key>")," ","[ ",(0,r.kt)("inlineCode",{parentName:"strong"},"<value>"),", ",(0,r.kt)("inlineCode",{parentName:"strong"},"<value2>"),", ... ]"," ",(0,r.kt)("inlineCode",{parentName:"strong"},"@<tid>")),", where:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<tid>")," is a ",(0,r.kt)("a",{parentName:"li",href:"@"},"terminology identifier")," that ",(0,r.kt)("a",{parentName:"li",href:"@"},"identifies")," the ",(0,r.kt)("a",{parentName:"li",href:"@"},"terminology")," from which the ",(0,r.kt)("a",{parentName:"li",href:"@"},"term")," is to be added."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<key>")," is a text that corresponds with a field name in an ",(0,r.kt)("a",{parentName:"li",href:"@"},"MRG entry")," that resides in that ",(0,r.kt)("a",{parentName:"li",href:"@"},"MRG"),", such as ",(0,r.kt)("inlineCode",{parentName:"li"},"term"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"grouptags"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"status"),", etc."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<value>"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"<value2>"),", ... are texts that are used to determine whether or not a ",(0,r.kt)("a",{parentName:"li",href:"@"},"term")," from the designated ",(0,r.kt)("a",{parentName:"li",href:"@"},"terminology")," is to be selected.")))),(0,r.kt)("p",null,"These instructions will select every ",(0,r.kt)("a",{parentName:"p",href:"@"},"term")," whose specification (as taken from the designated source) contains a field named ",(0,r.kt)("inlineCode",{parentName:"p"},"<key>"),", and (one of) the value(s) of that field matches with at least one of the values in ",(0,r.kt)("inlineCode",{parentName:"p"},"[ <value1>, <value2>, ... ]"),"."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Syntax:"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Meaning:"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"term ","[actor]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"select every ",(0,r.kt)("a",{parentName:"td",href:"@"},"term")," in the ",(0,r.kt)("a",{parentName:"td",href:"@"},"current scope"),", that is described by a ",(0,r.kt)("a",{parentName:"td",href:"@"},"curated text")," of which the ",(0,r.kt)("a",{parentName:"td",href:"@"},"header")," has a ",(0,r.kt)("inlineCode",{parentName:"td"},"term")," field with the value ",(0,r.kt)("inlineCode",{parentName:"td"},"actor"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"status","[proposed,approved]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"select every ",(0,r.kt)("a",{parentName:"td",href:"@"},"term")," in the ",(0,r.kt)("a",{parentName:"td",href:"@"},"current scope"),", that is described by a ",(0,r.kt)("a",{parentName:"td",href:"@"},"curated text")," of which the ",(0,r.kt)("a",{parentName:"td",href:"@"},"header")," has a ",(0,r.kt)("inlineCode",{parentName:"td"},"status")," field with the value ",(0,r.kt)("inlineCode",{parentName:"td"},"proposed")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"approved"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"somefield []"),(0,r.kt)("td",{parentName:"tr",align:"left"},"select every ",(0,r.kt)("a",{parentName:"td",href:"@"},"term")," in the ",(0,r.kt)("a",{parentName:"td",href:"@"},"current scope"),", that is described by a ",(0,r.kt)("a",{parentName:"td",href:"@"},"curated text")," of which the ",(0,r.kt)("a",{parentName:"td",href:"@"},"header")," has a ",(0,r.kt)("inlineCode",{parentName:"td"},"somefield")," field that has no value specified.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"term ","[actor,party]","@tev2:v1"),(0,r.kt)("td",{parentName:"tr",align:"left"},"select every ",(0,r.kt)("a",{parentName:"td",href:"@"},"term")," in the ",(0,r.kt)("a",{parentName:"td",href:"@"},"terminology")," ",(0,r.kt)("a",{parentName:"td",href:"@"},"identified")," by ",(0,r.kt)("inlineCode",{parentName:"td"},"@tev2:v1"),", that is described by an ",(0,r.kt)("a",{parentName:"td",href:"@"},"MRG entry")," (in the corresponding ",(0,r.kt)("a",{parentName:"td",href:"@"},"MRG"),") that has a ",(0,r.kt)("inlineCode",{parentName:"td"},"term")," field with the value ",(0,r.kt)("inlineCode",{parentName:"td"},"actor")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"party"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"grouptags","[x,y,z]","@essif-lab"),(0,r.kt)("td",{parentName:"tr",align:"left"},"select every ",(0,r.kt)("a",{parentName:"td",href:"@"},"term")," in the default ",(0,r.kt)("a",{parentName:"td",href:"@"},"terminology")," of ",(0,r.kt)("a",{parentName:"td",href:"@"},"scope")," ",(0,r.kt)("inlineCode",{parentName:"td"},"essif-lab"),", that is described by an ",(0,r.kt)("a",{parentName:"td",href:"@"},"MRG entry")," (in the corresponding ",(0,r.kt)("a",{parentName:"td",href:"@"},"MRG"),") that has a ",(0,r.kt)("inlineCode",{parentName:"td"},"grouptags")," field whose value is ",(0,r.kt)("inlineCode",{parentName:"td"},"x"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"y"),", or ",(0,r.kt)("inlineCode",{parentName:"td"},"z"),"."))))),(0,r.kt)("h2",{id:"syntax-remove"},"Removing Terms"),(0,r.kt)("p",null,"Selecting and subsequently removing ",(0,r.kt)("a",{parentName:"p",href:"@"},"provisional MRG entries"),") from the ",(0,r.kt)("a",{parentName:"p",href:"@"},"provisional MRG")," consists of ",(0,r.kt)("a",{parentName:"p",href:"@"},"identifying")," and removing them."),(0,r.kt)("p",null,"The syntax is similar to one that is used for adding terms, but it is preceeded with a ",(0,r.kt)("inlineCode",{parentName:"p"},"-"),"sign, as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"-",(0,r.kt)("inlineCode",{parentName:"strong"},"<key>")," ","[ ",(0,r.kt)("inlineCode",{parentName:"strong"},"<value>"),", ",(0,r.kt)("inlineCode",{parentName:"strong"},"<value2>"),", ... ]"),", where:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<key>")," is a text that corresponds with a field name in an ",(0,r.kt)("a",{parentName:"li",href:"@"},"MRG entry")," in the ",(0,r.kt)("a",{parentName:"li",href:"@"},"provisional MRG"),", , such as ",(0,r.kt)("inlineCode",{parentName:"li"},"term"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"grouptags"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"status"),", etc."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<value>"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"<value2>"),", ... are texts that are used to determine whether or not an ",(0,r.kt)("a",{parentName:"li",href:"@"},"MRG entry")," is to be removed from the ",(0,r.kt)("a",{parentName:"li",href:"@"},"provisional MRG"),".")))),(0,r.kt)("p",null,"This syntax removes every ",(0,r.kt)("a",{parentName:"p",href:"@"},"provisional MRG entry")," from the ",(0,r.kt)("a",{parentName:"p",href:"@"},"provisional MRG")," that has a field named ",(0,r.kt)("inlineCode",{parentName:"p"},"<key>"),", and where (one of) the value(s) of that field matches with at least one of the values in ",(0,r.kt)("inlineCode",{parentName:"p"},"[ <value1>, <value2>, ... ]"),"."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Syntax:"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Meaning:"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"-term ","[actor]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"remove all entries that have a ",(0,r.kt)("inlineCode",{parentName:"td"},"term")," field whose value is ",(0,r.kt)("inlineCode",{parentName:"td"},"actor"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"-status","[proposed,approved]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"remove all entries that have a ",(0,r.kt)("inlineCode",{parentName:"td"},"status")," field whose value is ",(0,r.kt)("inlineCode",{parentName:"td"},"proposed")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"approved"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"-grouptags","[x,y,z]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"remove all entries that have a ",(0,r.kt)("inlineCode",{parentName:"td"},"grouptags")," field of which one of the listed ",(0,r.kt)("a",{parentName:"td",href:"@"},"grouptags")," is ",(0,r.kt)("inlineCode",{parentName:"td"},"x"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"y"),", or ",(0,r.kt)("inlineCode",{parentName:"td"},"z"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"-somefield []"),(0,r.kt)("td",{parentName:"tr",align:"left"},"remove all entries that have a ",(0,r.kt)("inlineCode",{parentName:"td"},"somefield")," field that has no value specified."))))),(0,r.kt)("h2",{id:"syntax-rename"},"Renaming/rewriting term fields"),(0,r.kt)("admonition",{title:"Editor's note",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The ability to rename ",(0,r.kt)("a",{parentName:"p",href:"@"},"terms")," as they are imported may introduce issues related to other field-names, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"term"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"formPhrases"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"synonyms"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"glossaryText"),"s and possibly some others. Perhaps this syntax should therefore be extended, enabling ",(0,r.kt)("a",{parentName:"p",href:"@"},"curators")," to simultaneously change these (and other) fields in the ",(0,r.kt)("a",{parentName:"p",href:"@"},"MRG entry"),".")),(0,r.kt)("p",null,"In analogy with ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Namespace"},"namespaces"),", we accommodate for the renaming of ",(0,r.kt)("a",{parentName:"p",href:"@"},"terms")," (better: modifying fields in ",(0,r.kt)("a",{parentName:"p",href:"@"},"provisional MRG entries"),") as they are 'imported' from ",(0,r.kt)("a",{parentName:"p",href:"@"},"terminologies")," other than the one that we are constructing. However, the analogy breaks down in the sense that it is not only the ",(0,r.kt)("a",{parentName:"p",href:"@"},"term")," that should be renameable (which is sufficient for ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Namespace"},"namespaces"),"), but also certain attributes may need to be changed, e.g. the ",(0,r.kt)("inlineCode",{parentName:"p"},"formPhrases"),"."),(0,r.kt)("p",null,"The following syntaxes are available for renaming fields in a ",(0,r.kt)("a",{parentName:"p",href:"@"},"provisional MRG entry")," that is part of the ",(0,r.kt)("a",{parentName:"p",href:"@"},"provisional MRG"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"rename")," ",(0,r.kt)("inlineCode",{parentName:"strong"},"<term>")," ","[ ",(0,r.kt)("inlineCode",{parentName:"strong"},"<key>"),":",(0,r.kt)("inlineCode",{parentName:"strong"},"<value>"),", ",(0,r.kt)("inlineCode",{parentName:"strong"},"<key2>:<value2>"),", ... ]"),", where:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<term>")," is the value of the ",(0,r.kt)("inlineCode",{parentName:"li"},"term")," field in the ",(0,r.kt)("a",{parentName:"li",href:"@"},"provisional MRG entry")," that is selected for the renaming process. Note that this value is an ",(0,r.kt)("a",{parentName:"li",href:"@"},"identifier")," for that ",(0,r.kt)("a",{parentName:"li",href:"@"},"provisional MRG entry"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<key>")," is a text that corresponds with a field name in a ",(0,r.kt)("a",{parentName:"li",href:"@"},"provisional MRG entry"),", such as ",(0,r.kt)("inlineCode",{parentName:"li"},"formPhrases"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"glossaryText"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"grouptags"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"status"),", etc."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<value>")," is a text that will replace the existing text of the field identified by ",(0,r.kt)("inlineCode",{parentName:"li"},"<key>"),". If the text contains multiple words, it is advised to surround it with (single or double) quotes.")))),(0,r.kt)("p",null,"Here is how it works. First, the ",(0,r.kt)("a",{parentName:"p",href:"@"},"provisional MRG Entry")," is searched that has a ",(0,r.kt)("inlineCode",{parentName:"p"},"term")," field whose value is ",(0,r.kt)("inlineCode",{parentName:"p"},"<term>"),". If found, all ",(0,r.kt)("inlineCode",{parentName:"p"},"<key>"),":",(0,r.kt)("inlineCode",{parentName:"p"},"<value>")," pairs are processed in the sequence they are specified. Processing a ",(0,r.kt)("inlineCode",{parentName:"p"},"<key>"),":",(0,r.kt)("inlineCode",{parentName:"p"},"<value>")," pair consists of looking for a field named ",(0,r.kt)("inlineCode",{parentName:"p"},"<key>")," in the selected ",(0,r.kt)("a",{parentName:"p",href:"@"},"MRG entry"),". We now have the following situations:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"if the ",(0,r.kt)("inlineCode",{parentName:"li"},"<key>")," field exists, and",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"if the ",(0,r.kt)("inlineCode",{parentName:"li"},"<value>")," is not empty, then the contents of the field is overwritten by ",(0,r.kt)("inlineCode",{parentName:"li"},"<value>"),";"),(0,r.kt)("li",{parentName:"ul"},"if the ",(0,r.kt)("inlineCode",{parentName:"li"},"<value>")," is empty, then the contents of the field is deleted;"))),(0,r.kt)("li",{parentName:"ul"},"if the ",(0,r.kt)("inlineCode",{parentName:"li"},"<key>")," field does not exists, and",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"if the ",(0,r.kt)("inlineCode",{parentName:"li"},"<value>")," is not empty, then a new field named ",(0,r.kt)("inlineCode",{parentName:"li"},"<key>")," with the specified ",(0,r.kt)("inlineCode",{parentName:"li"},"<value>")," is added to the ",(0,r.kt)("a",{parentName:"li",href:"@"},"MRG entry"),";"),(0,r.kt)("li",{parentName:"ul"},"if the ",(0,r.kt)("inlineCode",{parentName:"li"},"<value>")," is empty, then nothing is done.")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Renaming examples"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},'rename party [ status:accepted, hoverText:"A natural person or a legal person" ]')),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"searches for the ",(0,r.kt)("a",{parentName:"li",href:"@"},"provisional MRG entry")," whose ",(0,r.kt)("inlineCode",{parentName:"li"},"term")," field has value ",(0,r.kt)("inlineCode",{parentName:"li"},"party"),", and (when found)"),(0,r.kt)("li",{parentName:"ul"},"changes (or creates) its ",(0,r.kt)("inlineCode",{parentName:"li"},"status")," field to so that it contains ",(0,r.kt)("inlineCode",{parentName:"li"},"accepted"),", and "),(0,r.kt)("li",{parentName:"ul"},"changes (or creates) its ",(0,r.kt)("inlineCode",{parentName:"li"},"hoverText")," field to so that it contains ",(0,r.kt)("inlineCode",{parentName:"li"},'"A natural person or a legal person"'),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},'rename party [ term:partij, formPhrases:"partij{en}", hoverText:"Een natuurlijk persoon of een rechtspersoon" ]'))),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"searches for the ",(0,r.kt)("a",{parentName:"li",href:"@"},"provisional MRG entry")," whose ",(0,r.kt)("inlineCode",{parentName:"li"},"term")," field has value ",(0,r.kt)("inlineCode",{parentName:"li"},"party"),", and (when found)"),(0,r.kt)("li",{parentName:"ul"},"changes (or creates) its ",(0,r.kt)("inlineCode",{parentName:"li"},"term")," field to so that it contains ",(0,r.kt)("inlineCode",{parentName:"li"},"partij"),";"),(0,r.kt)("li",{parentName:"ul"},"changes (or creates) its ",(0,r.kt)("inlineCode",{parentName:"li"},"status")," field to so that it contains ",(0,r.kt)("inlineCode",{parentName:"li"},"approved"),"."),(0,r.kt)("li",{parentName:"ul"},"changes (or creates) its ",(0,r.kt)("inlineCode",{parentName:"li"},"hoverText")," field to so that it contains ",(0,r.kt)("inlineCode",{parentName:"li"},'"A natural or legal person"')))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"rename party [ hoverText: ]"))),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"searches for the ",(0,r.kt)("a",{parentName:"li",href:"@"},"provisional MRG entry")," whose ",(0,r.kt)("inlineCode",{parentName:"li"},"term")," field has value ",(0,r.kt)("inlineCode",{parentName:"li"},"party"),", and (when found)"),(0,r.kt)("li",{parentName:"ul"},"removes the contents from the ",(0,r.kt)("inlineCode",{parentName:"li"},"hoverText")," field if such a field exists.",(0,r.kt)("br",null)))))),(0,r.kt)("p",null,"where:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"symbol"),(0,r.kt)("th",{parentName:"tr",align:"left"},"description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"<term>")),(0,r.kt)("td",{parentName:"tr",align:"left"},"the ",(0,r.kt)("a",{parentName:"td",href:"@"},"term")," of the tuple that will be selected for renaming.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"<fieldmodifierlist>")),(0,r.kt)("td",{parentName:"tr",align:"left"},"a (non-empty) comma-separated list of ",(0,r.kt)("inlineCode",{parentName:"td"},"<fieldmodifier>"),"s.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"<fieldmodifier>")),(0,r.kt)("td",{parentName:"tr",align:"left"},"a ",(0,r.kt)("inlineCode",{parentName:"td"},"<key>:<value>")," pair.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"<key>")),(0,r.kt)("td",{parentName:"tr",align:"left"},"a text that identifies a field in a ",(0,r.kt)("a",{parentName:"td",href:"@"},"provisional MRG entry"),", the value of which is to be changed, e.g. ",(0,r.kt)("inlineCode",{parentName:"td"},"formPhrases"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"grouptags"),", etc.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"<value>")),(0,r.kt)("td",{parentName:"tr",align:"left"},"a text that will replace the existing text of the field identified by ",(0,r.kt)("inlineCode",{parentName:"td"},"<key>"),".")))),(0,r.kt)("p",null,"This syntax is processed by first selecting the tuple (in the tuple set that is being constructed) that has the specified ",(0,r.kt)("inlineCode",{parentName:"p"},"<term>")," as its ",(0,r.kt)("inlineCode",{parentName:"p"},"term"),"-field, and then sequentially processing the ",(0,r.kt)("inlineCode",{parentName:"p"},"<fieldmodifier>"),"s in the ",(0,r.kt)("inlineCode",{parentName:"p"},"<fieldmodifierlist>"),", which means that the existing text of the field that is identified by the ",(0,r.kt)("inlineCode",{parentName:"p"},"<key>")," element of the ",(0,r.kt)("inlineCode",{parentName:"p"},"<fieldmodifier>")," is replaced by the text specified by the ",(0,r.kt)("inlineCode",{parentName:"p"},"<value>")," element of that ",(0,r.kt)("inlineCode",{parentName:"p"},"<fieldmodifier>"),"."),(0,r.kt)("admonition",{title:"Editor's note",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The ability to rename terms as they are imported may introduce some issues related to other field-names, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"term"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"formPhrases"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"synonyms"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"glossaryText"),"s and possibly some others. Perhaps this syntax should therefore be extended, enabling ",(0,r.kt)("a",{parentName:"p",href:"@"},"curators")," to simultaneously change these (and other) fields in the ",(0,r.kt)("a",{parentName:"p",href:"@"},"MRG entry"),".")))}d.isMDXComponent=!0}}]);